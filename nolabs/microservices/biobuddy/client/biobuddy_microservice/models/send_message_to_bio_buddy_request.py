# coding: utf-8

"""
    Bio Buddy

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from biobuddy_microservice.models.component import Component
from biobuddy_microservice.models.job_id import JobId
from biobuddy_microservice.models.workflow_component import WorkflowComponent
from pydantic import BaseModel, StrictStr
from typing_extensions import Self


class SendMessageToBioBuddyRequest(BaseModel):
    """
    SendMessageToBioBuddyRequest
    """  # noqa: E501

    experiment_id: StrictStr
    message_content: StrictStr
    previous_messages: List[Dict[str, StrictStr]]
    available_components: List[Component]
    current_workflow: List[WorkflowComponent]
    tools: List[Dict[str, Any]]
    job_id: Optional[JobId] = None
    __properties: ClassVar[List[str]] = [
        "experiment_id",
        "message_content",
        "previous_messages",
        "available_components",
        "current_workflow",
        "tools",
        "job_id",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendMessageToBioBuddyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in available_components (list)
        _items = []
        if self.available_components:
            for _item in self.available_components:
                if _item:
                    _items.append(_item.to_dict())
            _dict["available_components"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in current_workflow (list)
        _items = []
        if self.current_workflow:
            for _item in self.current_workflow:
                if _item:
                    _items.append(_item.to_dict())
            _dict["current_workflow"] = _items
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict["job_id"] = self.job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendMessageToBioBuddyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "experiment_id": obj.get("experiment_id"),
                "message_content": obj.get("message_content"),
                "previous_messages": obj.get("previous_messages"),
                "available_components": (
                    [
                        Component.from_dict(_item)
                        for _item in obj["available_components"]
                    ]
                    if obj.get("available_components") is not None
                    else None
                ),
                "current_workflow": (
                    [
                        WorkflowComponent.from_dict(_item)
                        for _item in obj["current_workflow"]
                    ]
                    if obj.get("current_workflow") is not None
                    else None
                ),
                "tools": obj.get("tools"),
                "job_id": (
                    JobId.from_dict(obj["job_id"])
                    if obj.get("job_id") is not None
                    else None
                ),
            }
        )
        return _obj
