/* tslint:disable */
/* eslint-disable */
/**
 * NoLabs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChangeExperimentNameRequest
 */
export interface ChangeExperimentNameRequest {
    /**
     * 
     * @type {any}
     * @memberof ChangeExperimentNameRequest
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof ChangeExperimentNameRequest
     */
    'name': any;
}
/**
 * 
 * @export
 * @interface ErrorCodes
 */
export interface ErrorCodes {
}
/**
 * 
 * @export
 * @interface ExperimentMetadataResponse
 */
export interface ExperimentMetadataResponse {
    /**
     * 
     * @type {any}
     * @memberof ExperimentMetadataResponse
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof ExperimentMetadataResponse
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof ExperimentMetadataResponse
     */
    'date': any;
}
/**
 * 
 * @export
 * @interface GenerateUuidResponse
 */
export interface GenerateUuidResponse {
    /**
     * 
     * @type {any}
     * @memberof GenerateUuidResponse
     */
    'uuid': any;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {any}
     * @memberof HTTPValidationError
     */
    'detail'?: any;
}
/**
 * 
 * @export
 * @interface IntegratorsRequest
 */
export interface IntegratorsRequest {
}
/**
 * 
 * @export
 * @interface NolabsApiModelsConformationsGetExperimentResponse
 */
export interface NolabsApiModelsConformationsGetExperimentResponse {
    /**
     * 
     * @type {ExperimentMetadataResponse}
     * @memberof NolabsApiModelsConformationsGetExperimentResponse
     */
    'metadata': ExperimentMetadataResponse;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsConformationsGetExperimentResponse
     */
    'data': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsGeneOntologyAminoAcidResponse
 */
export interface NolabsApiModelsGeneOntologyAminoAcidResponse {
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsGeneOntologyAminoAcidResponse
     */
    'sequence': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsGeneOntologyAminoAcidResponse
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsGeneOntologyAminoAcidResponse
     */
    'go': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsGeneOntologyGetExperimentResponse
 */
export interface NolabsApiModelsGeneOntologyGetExperimentResponse {
    /**
     * 
     * @type {ExperimentMetadataResponse}
     * @memberof NolabsApiModelsGeneOntologyGetExperimentResponse
     */
    'metadata': ExperimentMetadataResponse;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsGeneOntologyGetExperimentResponse
     */
    'amino_acids': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsLocalisationAminoAcidResponse
 */
export interface NolabsApiModelsLocalisationAminoAcidResponse {
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'sequence': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'cytosolic_proteins': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'mitochondrial_proteins': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'nuclear_proteins': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'other_proteins': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationAminoAcidResponse
     */
    'extracellular_secreted_proteins': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsLocalisationGetExperimentResponse
 */
export interface NolabsApiModelsLocalisationGetExperimentResponse {
    /**
     * 
     * @type {ExperimentMetadataResponse}
     * @memberof NolabsApiModelsLocalisationGetExperimentResponse
     */
    'metadata': ExperimentMetadataResponse;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsLocalisationGetExperimentResponse
     */
    'amino_acids': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsSolubilityAminoAcidResponse
 */
export interface NolabsApiModelsSolubilityAminoAcidResponse {
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsSolubilityAminoAcidResponse
     */
    'sequence': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsSolubilityAminoAcidResponse
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsSolubilityAminoAcidResponse
     */
    'soluble_probability': any;
}
/**
 * 
 * @export
 * @interface NolabsApiModelsSolubilityGetExperimentResponse
 */
export interface NolabsApiModelsSolubilityGetExperimentResponse {
    /**
     * 
     * @type {ExperimentMetadataResponse}
     * @memberof NolabsApiModelsSolubilityGetExperimentResponse
     */
    'metadata': ExperimentMetadataResponse;
    /**
     * 
     * @type {any}
     * @memberof NolabsApiModelsSolubilityGetExperimentResponse
     */
    'amino_acids': any;
}
/**
 * 
 * @export
 * @interface PdbContent
 */
export interface PdbContent {
}
/**
 * 
 * @export
 * @interface ProblemDetailsResponse
 */
export interface ProblemDetailsResponse {
    /**
     * 
     * @type {any}
     * @memberof ProblemDetailsResponse
     */
    'errors': any;
    /**
     * 
     * @type {ErrorCodes}
     * @memberof ProblemDetailsResponse
     */
    'error_code': ErrorCodes;
}


/**
 * 
 * @export
 * @interface ResponseInferenceApiV1ConformationsInferencePost
 */
export interface ResponseInferenceApiV1ConformationsInferencePost {
    /**
     * 
     * @type {any}
     * @memberof ResponseInferenceApiV1ConformationsInferencePost
     */
    'experiment_id': any;
    /**
     * 
     * @type {PdbContent}
     * @memberof ResponseInferenceApiV1ConformationsInferencePost
     */
    'pdb_content'?: PdbContent;
    /**
     * 
     * @type {any}
     * @memberof ResponseInferenceApiV1ConformationsInferencePost
     */
    'errors': any;
    /**
     * 
     * @type {ErrorCodes}
     * @memberof ResponseInferenceApiV1ConformationsInferencePost
     */
    'error_code': ErrorCodes;
}


/**
 * 
 * @export
 * @interface RunGeneOntologyResponse
 */
export interface RunGeneOntologyResponse {
    /**
     * 
     * @type {any}
     * @memberof RunGeneOntologyResponse
     */
    'experiment_id': any;
    /**
     * 
     * @type {any}
     * @memberof RunGeneOntologyResponse
     */
    'amino_acids': any;
    /**
     * 
     * @type {any}
     * @memberof RunGeneOntologyResponse
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface RunGeneOntologyResponseDataNode
 */
export interface RunGeneOntologyResponseDataNode {
    /**
     * 
     * @type {any}
     * @memberof RunGeneOntologyResponseDataNode
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof RunGeneOntologyResponseDataNode
     */
    'namespace': any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof RunGeneOntologyResponseDataNode
     */
    'edges': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface RunLocalisationResponse
 */
export interface RunLocalisationResponse {
    /**
     * 
     * @type {any}
     * @memberof RunLocalisationResponse
     */
    'experiment_id': any;
    /**
     * 
     * @type {any}
     * @memberof RunLocalisationResponse
     */
    'amino_acids': any;
    /**
     * 
     * @type {any}
     * @memberof RunLocalisationResponse
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface RunSimulationsResponse
 */
export interface RunSimulationsResponse {
    /**
     * 
     * @type {any}
     * @memberof RunSimulationsResponse
     */
    'experiment_id': any;
    /**
     * 
     * @type {PdbContent}
     * @memberof RunSimulationsResponse
     */
    'pdb_content'?: PdbContent;
    /**
     * 
     * @type {any}
     * @memberof RunSimulationsResponse
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface RunSolubilityResponse
 */
export interface RunSolubilityResponse {
    /**
     * 
     * @type {any}
     * @memberof RunSolubilityResponse
     */
    'experiment_id': any;
    /**
     * 
     * @type {any}
     * @memberof RunSolubilityResponse
     */
    'amino_acids': any;
    /**
     * 
     * @type {any}
     * @memberof RunSolubilityResponse
     */
    'errors'?: any;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'loc': any;
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'msg': any;
    /**
     * 
     * @type {any}
     * @memberof ValidationError
     */
    'type': any;
}

/**
 * ConformationsApi - axios parameter creator
 * @export
 */
export const ConformationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1ConformationsChangeExperimentNamePost: async (changeExperimentNameRequest: ChangeExperimentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeExperimentNameRequest' is not null or undefined
            assertParamExists('changeExperimentNameApiV1ConformationsChangeExperimentNamePost', 'changeExperimentNameRequest', changeExperimentNameRequest)
            const localVarPath = `/api/v1/conformations/change-experiment-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeExperimentNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1ConformationsDeleteExperimentDelete: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('deleteExperimentApiV1ConformationsDeleteExperimentDelete', 'experimentId', experimentId)
            const localVarPath = `/api/v1/conformations/delete-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1ConformationsExperimentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/conformations/experiments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1ConformationsGenerateIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/conformations/generate_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1ConformationsGetExperimentGet: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentApiV1ConformationsGetExperimentGet', 'experimentId', experimentId)
            const localVarPath = `/api/v1/conformations/get-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inference
         * @param {any} pdbFile 
         * @param {any} experimentName 
         * @param {string} [experimentId] 
         * @param {any} [totalFrames] 
         * @param {any} [temperatureK] 
         * @param {any} [takeFrameEvery] 
         * @param {any} [stepSize] 
         * @param {any} [replaceNonStandardResidues] 
         * @param {any} [addMissingAtoms] 
         * @param {any} [addMissingHydrogens] 
         * @param {any} [frictionCoeff] 
         * @param {any} [ignoreMissingAtoms] 
         * @param {IntegratorsRequest} [integrator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1ConformationsInferencePost: async (pdbFile: any, experimentName: any, experimentId?: string, totalFrames?: any, temperatureK?: any, takeFrameEvery?: any, stepSize?: any, replaceNonStandardResidues?: any, addMissingAtoms?: any, addMissingHydrogens?: any, frictionCoeff?: any, ignoreMissingAtoms?: any, integrator?: IntegratorsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pdbFile' is not null or undefined
            assertParamExists('inferenceApiV1ConformationsInferencePost', 'pdbFile', pdbFile)
            // verify required parameter 'experimentName' is not null or undefined
            assertParamExists('inferenceApiV1ConformationsInferencePost', 'experimentName', experimentName)
            const localVarPath = `/api/v1/conformations/inference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (pdbFile !== undefined) { 
                localVarFormParams.append('pdb_file', new Blob([JSON.stringify(pdbFile)], { type: "application/json", }));
            }
    
            if (experimentName !== undefined) { 
                localVarFormParams.append('experiment_name', new Blob([JSON.stringify(experimentName)], { type: "application/json", }));
            }
    
            if (experimentId !== undefined) { 
                localVarFormParams.append('experiment_id', experimentId as any);
            }
    
            if (totalFrames !== undefined) { 
                localVarFormParams.append('total_frames', new Blob([JSON.stringify(totalFrames)], { type: "application/json", }));
            }
    
            if (temperatureK !== undefined) { 
                localVarFormParams.append('temperature_k', new Blob([JSON.stringify(temperatureK)], { type: "application/json", }));
            }
    
            if (takeFrameEvery !== undefined) { 
                localVarFormParams.append('take_frame_every', new Blob([JSON.stringify(takeFrameEvery)], { type: "application/json", }));
            }
    
            if (stepSize !== undefined) { 
                localVarFormParams.append('step_size', new Blob([JSON.stringify(stepSize)], { type: "application/json", }));
            }
    
            if (replaceNonStandardResidues !== undefined) { 
                localVarFormParams.append('replace_non_standard_residues', new Blob([JSON.stringify(replaceNonStandardResidues)], { type: "application/json", }));
            }
    
            if (addMissingAtoms !== undefined) { 
                localVarFormParams.append('add_missing_atoms', new Blob([JSON.stringify(addMissingAtoms)], { type: "application/json", }));
            }
    
            if (addMissingHydrogens !== undefined) { 
                localVarFormParams.append('add_missing_hydrogens', new Blob([JSON.stringify(addMissingHydrogens)], { type: "application/json", }));
            }
    
            if (frictionCoeff !== undefined) { 
                localVarFormParams.append('friction_coeff', new Blob([JSON.stringify(frictionCoeff)], { type: "application/json", }));
            }
    
            if (ignoreMissingAtoms !== undefined) { 
                localVarFormParams.append('ignore_missing_atoms', new Blob([JSON.stringify(ignoreMissingAtoms)], { type: "application/json", }));
            }
    
            if (integrator !== undefined) { 
                localVarFormParams.append('integrator', integrator as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConformationsApi - functional programming interface
 * @export
 */
export const ConformationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConformationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.changeExperimentNameApiV1ConformationsChangeExperimentNamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.deleteExperimentApiV1ConformationsDeleteExperimentDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentsApiV1ConformationsExperimentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperimentMetadataResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentsApiV1ConformationsExperimentsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.experimentsApiV1ConformationsExperimentsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUuidApiV1ConformationsGenerateIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateUuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUuidApiV1ConformationsGenerateIdGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.generateUuidApiV1ConformationsGenerateIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentApiV1ConformationsGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NolabsApiModelsConformationsGetExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentApiV1ConformationsGetExperimentGet(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.getExperimentApiV1ConformationsGetExperimentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inference
         * @param {any} pdbFile 
         * @param {any} experimentName 
         * @param {string} [experimentId] 
         * @param {any} [totalFrames] 
         * @param {any} [temperatureK] 
         * @param {any} [takeFrameEvery] 
         * @param {any} [stepSize] 
         * @param {any} [replaceNonStandardResidues] 
         * @param {any} [addMissingAtoms] 
         * @param {any} [addMissingHydrogens] 
         * @param {any} [frictionCoeff] 
         * @param {any} [ignoreMissingAtoms] 
         * @param {IntegratorsRequest} [integrator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inferenceApiV1ConformationsInferencePost(pdbFile: any, experimentName: any, experimentId?: string, totalFrames?: any, temperatureK?: any, takeFrameEvery?: any, stepSize?: any, replaceNonStandardResidues?: any, addMissingAtoms?: any, addMissingHydrogens?: any, frictionCoeff?: any, ignoreMissingAtoms?: any, integrator?: IntegratorsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseInferenceApiV1ConformationsInferencePost>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inferenceApiV1ConformationsInferencePost(pdbFile, experimentName, experimentId, totalFrames, temperatureK, takeFrameEvery, stepSize, replaceNonStandardResidues, addMissingAtoms, addMissingHydrogens, frictionCoeff, ignoreMissingAtoms, integrator, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConformationsApi.inferenceApiV1ConformationsInferencePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConformationsApi - factory interface
 * @export
 */
export const ConformationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConformationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: any): AxiosPromise<any> {
            return localVarFp.changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1ConformationsExperimentsGet(options?: any): AxiosPromise<Array<ExperimentMetadataResponse>> {
            return localVarFp.experimentsApiV1ConformationsExperimentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1ConformationsGenerateIdGet(options?: any): AxiosPromise<GenerateUuidResponse> {
            return localVarFp.generateUuidApiV1ConformationsGenerateIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1ConformationsGetExperimentGet(experimentId: string, options?: any): AxiosPromise<NolabsApiModelsConformationsGetExperimentResponse> {
            return localVarFp.getExperimentApiV1ConformationsGetExperimentGet(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inference
         * @param {any} pdbFile 
         * @param {any} experimentName 
         * @param {string} [experimentId] 
         * @param {any} [totalFrames] 
         * @param {any} [temperatureK] 
         * @param {any} [takeFrameEvery] 
         * @param {any} [stepSize] 
         * @param {any} [replaceNonStandardResidues] 
         * @param {any} [addMissingAtoms] 
         * @param {any} [addMissingHydrogens] 
         * @param {any} [frictionCoeff] 
         * @param {any} [ignoreMissingAtoms] 
         * @param {IntegratorsRequest} [integrator] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1ConformationsInferencePost(pdbFile: any, experimentName: any, experimentId?: string, totalFrames?: any, temperatureK?: any, takeFrameEvery?: any, stepSize?: any, replaceNonStandardResidues?: any, addMissingAtoms?: any, addMissingHydrogens?: any, frictionCoeff?: any, ignoreMissingAtoms?: any, integrator?: IntegratorsRequest, options?: any): AxiosPromise<ResponseInferenceApiV1ConformationsInferencePost> {
            return localVarFp.inferenceApiV1ConformationsInferencePost(pdbFile, experimentName, experimentId, totalFrames, temperatureK, takeFrameEvery, stepSize, replaceNonStandardResidues, addMissingAtoms, addMissingHydrogens, frictionCoeff, ignoreMissingAtoms, integrator, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConformationsApi - object-oriented interface
 * @export
 * @class ConformationsApi
 * @extends {BaseAPI}
 */
export class ConformationsApi extends BaseAPI {
    /**
     * 
     * @summary Change Experiment Name
     * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).changeExperimentNameApiV1ConformationsChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).deleteExperimentApiV1ConformationsDeleteExperimentDelete(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Experiments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public experimentsApiV1ConformationsExperimentsGet(options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).experimentsApiV1ConformationsExperimentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public generateUuidApiV1ConformationsGenerateIdGet(options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).generateUuidApiV1ConformationsGenerateIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public getExperimentApiV1ConformationsGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).getExperimentApiV1ConformationsGetExperimentGet(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inference
     * @param {any} pdbFile 
     * @param {any} experimentName 
     * @param {string} [experimentId] 
     * @param {any} [totalFrames] 
     * @param {any} [temperatureK] 
     * @param {any} [takeFrameEvery] 
     * @param {any} [stepSize] 
     * @param {any} [replaceNonStandardResidues] 
     * @param {any} [addMissingAtoms] 
     * @param {any} [addMissingHydrogens] 
     * @param {any} [frictionCoeff] 
     * @param {any} [ignoreMissingAtoms] 
     * @param {IntegratorsRequest} [integrator] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConformationsApi
     */
    public inferenceApiV1ConformationsInferencePost(pdbFile: any, experimentName: any, experimentId?: string, totalFrames?: any, temperatureK?: any, takeFrameEvery?: any, stepSize?: any, replaceNonStandardResidues?: any, addMissingAtoms?: any, addMissingHydrogens?: any, frictionCoeff?: any, ignoreMissingAtoms?: any, integrator?: IntegratorsRequest, options?: RawAxiosRequestConfig) {
        return ConformationsApiFp(this.configuration).inferenceApiV1ConformationsInferencePost(pdbFile, experimentName, experimentId, totalFrames, temperatureK, takeFrameEvery, stepSize, replaceNonStandardResidues, addMissingAtoms, addMissingHydrogens, frictionCoeff, ignoreMissingAtoms, integrator, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GeneOntologyApi - axios parameter creator
 * @export
 */
export const GeneOntologyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost: async (changeExperimentNameRequest: ChangeExperimentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeExperimentNameRequest' is not null or undefined
            assertParamExists('changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost', 'changeExperimentNameRequest', changeExperimentNameRequest)
            const localVarPath = `/api/v1/gene-ontology/change-experiment-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeExperimentNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1GeneOntologyDeleteExperimentDelete: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('deleteExperimentApiV1GeneOntologyDeleteExperimentDelete', 'experimentId', experimentId)
            const localVarPath = `/api/v1/gene-ontology/delete-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1GeneOntologyExperimentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gene-ontology/experiments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1GeneOntologyGenerateIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/gene-ontology/generate_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1GeneOntologyGetExperimentGet: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentApiV1GeneOntologyGetExperimentGet', 'experimentId', experimentId)
            const localVarPath = `/api/v1/gene-ontology/get-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1GeneOntologyInferencePost: async (experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentName' is not null or undefined
            assertParamExists('inferenceApiV1GeneOntologyInferencePost', 'experimentName', experimentName)
            const localVarPath = `/api/v1/gene-ontology/inference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (experimentName !== undefined) { 
                localVarFormParams.append('experiment_name', new Blob([JSON.stringify(experimentName)], { type: "application/json", }));
            }
    
            if (experimentId !== undefined) { 
                localVarFormParams.append('experiment_id', new Blob([JSON.stringify(experimentId)], { type: "application/json", }));
            }
    
            if (aminoAcidSequence !== undefined) { 
                localVarFormParams.append('amino_acid_sequence', new Blob([JSON.stringify(aminoAcidSequence)], { type: "application/json", }));
            }
    
            if (fastas !== undefined) { 
                localVarFormParams.append('fastas', new Blob([JSON.stringify(fastas)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneOntologyApi - functional programming interface
 * @export
 */
export const GeneOntologyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneOntologyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NolabsApiModelsGeneOntologyGetExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.deleteExperimentApiV1GeneOntologyDeleteExperimentDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentsApiV1GeneOntologyExperimentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentsApiV1GeneOntologyExperimentsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.experimentsApiV1GeneOntologyExperimentsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUuidApiV1GeneOntologyGenerateIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateUuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUuidApiV1GeneOntologyGenerateIdGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.generateUuidApiV1GeneOntologyGenerateIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentApiV1GeneOntologyGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NolabsApiModelsGeneOntologyGetExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentApiV1GeneOntologyGetExperimentGet(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.getExperimentApiV1GeneOntologyGetExperimentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inferenceApiV1GeneOntologyInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunGeneOntologyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inferenceApiV1GeneOntologyInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GeneOntologyApi.inferenceApiV1GeneOntologyInferencePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GeneOntologyApi - factory interface
 * @export
 */
export const GeneOntologyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneOntologyApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: any): AxiosPromise<any> {
            return localVarFp.changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId: string, options?: any): AxiosPromise<NolabsApiModelsGeneOntologyGetExperimentResponse> {
            return localVarFp.deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1GeneOntologyExperimentsGet(options?: any): AxiosPromise<any> {
            return localVarFp.experimentsApiV1GeneOntologyExperimentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1GeneOntologyGenerateIdGet(options?: any): AxiosPromise<GenerateUuidResponse> {
            return localVarFp.generateUuidApiV1GeneOntologyGenerateIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1GeneOntologyGetExperimentGet(experimentId: string, options?: any): AxiosPromise<NolabsApiModelsGeneOntologyGetExperimentResponse> {
            return localVarFp.getExperimentApiV1GeneOntologyGetExperimentGet(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1GeneOntologyInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: any): AxiosPromise<RunGeneOntologyResponse> {
            return localVarFp.inferenceApiV1GeneOntologyInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneOntologyApi - object-oriented interface
 * @export
 * @class GeneOntologyApi
 * @extends {BaseAPI}
 */
export class GeneOntologyApi extends BaseAPI {
    /**
     * 
     * @summary Change Experiment Name
     * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).changeExperimentNameApiV1GeneOntologyChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).deleteExperimentApiV1GeneOntologyDeleteExperimentDelete(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Experiments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public experimentsApiV1GeneOntologyExperimentsGet(options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).experimentsApiV1GeneOntologyExperimentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public generateUuidApiV1GeneOntologyGenerateIdGet(options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).generateUuidApiV1GeneOntologyGenerateIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public getExperimentApiV1GeneOntologyGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).getExperimentApiV1GeneOntologyGetExperimentGet(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inference
     * @param {any} experimentName 
     * @param {any} [experimentId] 
     * @param {any} [aminoAcidSequence] 
     * @param {any} [fastas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneOntologyApi
     */
    public inferenceApiV1GeneOntologyInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig) {
        return GeneOntologyApiFp(this.configuration).inferenceApiV1GeneOntologyInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocalisationApi - axios parameter creator
 * @export
 */
export const LocalisationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1LocalisationChangeExperimentNamePost: async (changeExperimentNameRequest: ChangeExperimentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeExperimentNameRequest' is not null or undefined
            assertParamExists('changeExperimentNameApiV1LocalisationChangeExperimentNamePost', 'changeExperimentNameRequest', changeExperimentNameRequest)
            const localVarPath = `/api/v1/localisation/change-experiment-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeExperimentNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1LocalisationDeleteExperimentDelete: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('deleteExperimentApiV1LocalisationDeleteExperimentDelete', 'experimentId', experimentId)
            const localVarPath = `/api/v1/localisation/delete-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1LocalisationExperimentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/localisation/experiments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1LocalisationGenerateIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/localisation/generate_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1LocalisationGetExperimentGet: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentApiV1LocalisationGetExperimentGet', 'experimentId', experimentId)
            const localVarPath = `/api/v1/localisation/get-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1LocalisationInferencePost: async (experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentName' is not null or undefined
            assertParamExists('inferenceApiV1LocalisationInferencePost', 'experimentName', experimentName)
            const localVarPath = `/api/v1/localisation/inference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (experimentName !== undefined) { 
                localVarFormParams.append('experiment_name', new Blob([JSON.stringify(experimentName)], { type: "application/json", }));
            }
    
            if (experimentId !== undefined) { 
                localVarFormParams.append('experiment_id', new Blob([JSON.stringify(experimentId)], { type: "application/json", }));
            }
    
            if (aminoAcidSequence !== undefined) { 
                localVarFormParams.append('amino_acid_sequence', new Blob([JSON.stringify(aminoAcidSequence)], { type: "application/json", }));
            }
    
            if (fastas !== undefined) { 
                localVarFormParams.append('fastas', new Blob([JSON.stringify(fastas)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalisationApi - functional programming interface
 * @export
 */
export const LocalisationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalisationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.changeExperimentNameApiV1LocalisationChangeExperimentNamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.deleteExperimentApiV1LocalisationDeleteExperimentDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentsApiV1LocalisationExperimentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentsApiV1LocalisationExperimentsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.experimentsApiV1LocalisationExperimentsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUuidApiV1LocalisationGenerateIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateUuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUuidApiV1LocalisationGenerateIdGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.generateUuidApiV1LocalisationGenerateIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentApiV1LocalisationGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NolabsApiModelsLocalisationGetExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentApiV1LocalisationGetExperimentGet(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.getExperimentApiV1LocalisationGetExperimentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inferenceApiV1LocalisationInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunLocalisationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inferenceApiV1LocalisationInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LocalisationApi.inferenceApiV1LocalisationInferencePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LocalisationApi - factory interface
 * @export
 */
export const LocalisationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalisationApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: any): AxiosPromise<any> {
            return localVarFp.changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1LocalisationExperimentsGet(options?: any): AxiosPromise<any> {
            return localVarFp.experimentsApiV1LocalisationExperimentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1LocalisationGenerateIdGet(options?: any): AxiosPromise<GenerateUuidResponse> {
            return localVarFp.generateUuidApiV1LocalisationGenerateIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1LocalisationGetExperimentGet(experimentId: string, options?: any): AxiosPromise<NolabsApiModelsLocalisationGetExperimentResponse> {
            return localVarFp.getExperimentApiV1LocalisationGetExperimentGet(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1LocalisationInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: any): AxiosPromise<RunLocalisationResponse> {
            return localVarFp.inferenceApiV1LocalisationInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocalisationApi - object-oriented interface
 * @export
 * @class LocalisationApi
 * @extends {BaseAPI}
 */
export class LocalisationApi extends BaseAPI {
    /**
     * 
     * @summary Change Experiment Name
     * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).changeExperimentNameApiV1LocalisationChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).deleteExperimentApiV1LocalisationDeleteExperimentDelete(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Experiments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public experimentsApiV1LocalisationExperimentsGet(options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).experimentsApiV1LocalisationExperimentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public generateUuidApiV1LocalisationGenerateIdGet(options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).generateUuidApiV1LocalisationGenerateIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public getExperimentApiV1LocalisationGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).getExperimentApiV1LocalisationGetExperimentGet(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inference
     * @param {any} experimentName 
     * @param {any} [experimentId] 
     * @param {any} [aminoAcidSequence] 
     * @param {any} [fastas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalisationApi
     */
    public inferenceApiV1LocalisationInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig) {
        return LocalisationApiFp(this.configuration).inferenceApiV1LocalisationInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SolubilityApi - axios parameter creator
 * @export
 */
export const SolubilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1SolubilityChangeExperimentNamePost: async (changeExperimentNameRequest: ChangeExperimentNameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeExperimentNameRequest' is not null or undefined
            assertParamExists('changeExperimentNameApiV1SolubilityChangeExperimentNamePost', 'changeExperimentNameRequest', changeExperimentNameRequest)
            const localVarPath = `/api/v1/solubility/change-experiment-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeExperimentNameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1SolubilityDeleteExperimentDelete: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('deleteExperimentApiV1SolubilityDeleteExperimentDelete', 'experimentId', experimentId)
            const localVarPath = `/api/v1/solubility/delete-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1SolubilityExperimentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/solubility/experiments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1SolubilityGenerateIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/solubility/generate_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1SolubilityGetExperimentGet: async (experimentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentId' is not null or undefined
            assertParamExists('getExperimentApiV1SolubilityGetExperimentGet', 'experimentId', experimentId)
            const localVarPath = `/api/v1/solubility/get-experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentId !== undefined) {
                localVarQueryParameter['experiment_id'] = experimentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1SolubilityInferencePost: async (experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentName' is not null or undefined
            assertParamExists('inferenceApiV1SolubilityInferencePost', 'experimentName', experimentName)
            const localVarPath = `/api/v1/solubility/inference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (experimentName !== undefined) { 
                localVarFormParams.append('experiment_name', new Blob([JSON.stringify(experimentName)], { type: "application/json", }));
            }
    
            if (experimentId !== undefined) { 
                localVarFormParams.append('experiment_id', new Blob([JSON.stringify(experimentId)], { type: "application/json", }));
            }
    
            if (aminoAcidSequence !== undefined) { 
                localVarFormParams.append('amino_acid_sequence', new Blob([JSON.stringify(aminoAcidSequence)], { type: "application/json", }));
            }
    
            if (fastas !== undefined) { 
                localVarFormParams.append('fastas', new Blob([JSON.stringify(fastas)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SolubilityApi - functional programming interface
 * @export
 */
export const SolubilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SolubilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.changeExperimentNameApiV1SolubilityChangeExperimentNamePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.deleteExperimentApiV1SolubilityDeleteExperimentDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentsApiV1SolubilityExperimentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentsApiV1SolubilityExperimentsGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.experimentsApiV1SolubilityExperimentsGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUuidApiV1SolubilityGenerateIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateUuidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUuidApiV1SolubilityGenerateIdGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.generateUuidApiV1SolubilityGenerateIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExperimentApiV1SolubilityGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NolabsApiModelsSolubilityGetExperimentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExperimentApiV1SolubilityGetExperimentGet(experimentId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.getExperimentApiV1SolubilityGetExperimentGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inferenceApiV1SolubilityInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunSolubilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inferenceApiV1SolubilityInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SolubilityApi.inferenceApiV1SolubilityInferencePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SolubilityApi - factory interface
 * @export
 */
export const SolubilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SolubilityApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Experiment Name
         * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: any): AxiosPromise<any> {
            return localVarFp.changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Experiments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentsApiV1SolubilityExperimentsGet(options?: any): AxiosPromise<any> {
            return localVarFp.experimentsApiV1SolubilityExperimentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUuidApiV1SolubilityGenerateIdGet(options?: any): AxiosPromise<GenerateUuidResponse> {
            return localVarFp.generateUuidApiV1SolubilityGenerateIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Experiment
         * @param {string} experimentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperimentApiV1SolubilityGetExperimentGet(experimentId: string, options?: any): AxiosPromise<NolabsApiModelsSolubilityGetExperimentResponse> {
            return localVarFp.getExperimentApiV1SolubilityGetExperimentGet(experimentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inference
         * @param {any} experimentName 
         * @param {any} [experimentId] 
         * @param {any} [aminoAcidSequence] 
         * @param {any} [fastas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inferenceApiV1SolubilityInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: any): AxiosPromise<RunSolubilityResponse> {
            return localVarFp.inferenceApiV1SolubilityInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SolubilityApi - object-oriented interface
 * @export
 * @class SolubilityApi
 * @extends {BaseAPI}
 */
export class SolubilityApi extends BaseAPI {
    /**
     * 
     * @summary Change Experiment Name
     * @param {ChangeExperimentNameRequest} changeExperimentNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest: ChangeExperimentNameRequest, options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).changeExperimentNameApiV1SolubilityChangeExperimentNamePost(changeExperimentNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId: string, options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).deleteExperimentApiV1SolubilityDeleteExperimentDelete(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Experiments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public experimentsApiV1SolubilityExperimentsGet(options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).experimentsApiV1SolubilityExperimentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public generateUuidApiV1SolubilityGenerateIdGet(options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).generateUuidApiV1SolubilityGenerateIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Experiment
     * @param {string} experimentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public getExperimentApiV1SolubilityGetExperimentGet(experimentId: string, options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).getExperimentApiV1SolubilityGetExperimentGet(experimentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inference
     * @param {any} experimentName 
     * @param {any} [experimentId] 
     * @param {any} [aminoAcidSequence] 
     * @param {any} [fastas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SolubilityApi
     */
    public inferenceApiV1SolubilityInferencePost(experimentName: any, experimentId?: any, aminoAcidSequence?: any, fastas?: any, options?: RawAxiosRequestConfig) {
        return SolubilityApiFp(this.configuration).inferenceApiV1SolubilityInferencePost(experimentName, experimentId, aminoAcidSequence, fastas, options).then((request) => request(this.axios, this.basePath));
    }
}



