# coding: utf-8

"""
    RoseTTAFold API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel
from typing import Any, ClassVar, Dict, List
from rosettafold_microservice.models.a3_m_content import A3MContent
from rosettafold_microservice.models.fasta_content import FastaContent
from typing import Optional, Set
from typing_extensions import Self

class RunRosettaFoldRequest(BaseModel):
    """
    RunRosettaFoldRequest
    """ # noqa: E501
    fasta_content: FastaContent
    a3m_content: A3MContent
    __properties: ClassVar[List[str]] = ["fasta_content", "a3m_content"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunRosettaFoldRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fasta_content
        if self.fasta_content:
            _dict['fasta_content'] = self.fasta_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a3m_content
        if self.a3m_content:
            _dict['a3m_content'] = self.a3m_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunRosettaFoldRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fasta_content": FastaContent.from_dict(obj["fasta_content"]) if obj.get("fasta_content") is not None else None,
            "a3m_content": A3MContent.from_dict(obj["a3m_content"]) if obj.get("a3m_content") is not None else None
        })
        return _obj


