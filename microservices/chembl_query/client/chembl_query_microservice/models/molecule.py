# coding: utf-8

"""
    ChemBL Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List
from chembl_query_microservice.models.pref_name import PrefName
from typing import Optional, Set
from typing_extensions import Self

class Molecule(BaseModel):
    """
    Molecule
    """ # noqa: E501
    chembl_id: StrictStr
    molecule_type: StrictStr
    pref_name: PrefName
    synonyms: List[StrictStr]
    smiles: StrictStr
    __properties: ClassVar[List[str]] = ["chembl_id", "molecule_type", "pref_name", "synonyms", "smiles"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Molecule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pref_name
        if self.pref_name:
            _dict['pref_name'] = self.pref_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Molecule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chembl_id": obj.get("chembl_id"),
            "molecule_type": obj.get("molecule_type"),
            "pref_name": PrefName.from_dict(obj["pref_name"]) if obj.get("pref_name") is not None else None,
            "synonyms": obj.get("synonyms"),
            "smiles": obj.get("smiles")
        })
        return _obj


