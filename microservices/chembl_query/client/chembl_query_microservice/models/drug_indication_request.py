# coding: utf-8

"""
    ChemBL Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chembl_query_microservice.models.filters1 import Filters1
from chembl_query_microservice.models.job_id import JobId
from chembl_query_microservice.models.limit import Limit
from chembl_query_microservice.models.order_by import OrderBy
from typing import Optional, Set
from typing_extensions import Self

class DrugIndicationRequest(BaseModel):
    """
    DrugIndicationRequest
    """ # noqa: E501
    condition: StrictStr
    filters: Optional[Filters1] = None
    order_by: Optional[OrderBy] = None
    limit: Optional[Limit] = None
    job_id: Optional[JobId] = None
    __properties: ClassVar[List[str]] = ["condition", "filters", "order_by", "limit", "job_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DrugIndicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_by
        if self.order_by:
            _dict['order_by'] = self.order_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit
        if self.limit:
            _dict['limit'] = self.limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['job_id'] = self.job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DrugIndicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": obj.get("condition"),
            "filters": Filters1.from_dict(obj["filters"]) if obj.get("filters") is not None else None,
            "order_by": OrderBy.from_dict(obj["order_by"]) if obj.get("order_by") is not None else None,
            "limit": Limit.from_dict(obj["limit"]) if obj.get("limit") is not None else None,
            "job_id": JobId.from_dict(obj["job_id"]) if obj.get("job_id") is not None else None
        })
        return _obj


