# coding: utf-8

"""
    SC-GPT API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class ReferenceMappingRequest(BaseModel):
    """
    ReferenceMappingRequest
    """  # noqa: E501

    query_path: StrictStr
    reference_path: StrictStr
    cell_type_key: Optional[StrictStr] = None
    gene_col: Optional[StrictStr] = "gene_name"
    batch_size: Optional[StrictInt] = 64
    device: Optional[StrictStr] = "cpu"
    k_neighbors: Optional[StrictInt] = 10
    calculate_metrics: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = [
        "query_path",
        "reference_path",
        "cell_type_key",
        "gene_col",
        "batch_size",
        "device",
        "k_neighbors",
        "calculate_metrics",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReferenceMappingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cell_type_key (nullable) is None
        # and model_fields_set contains the field
        if self.cell_type_key is None and "cell_type_key" in self.model_fields_set:
            _dict["cell_type_key"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReferenceMappingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "query_path": obj.get("query_path"),
                "reference_path": obj.get("reference_path"),
                "cell_type_key": obj.get("cell_type_key"),
                "gene_col": (
                    obj.get("gene_col")
                    if obj.get("gene_col") is not None
                    else "gene_name"
                ),
                "batch_size": (
                    obj.get("batch_size") if obj.get("batch_size") is not None else 64
                ),
                "device": obj.get("device") if obj.get("device") is not None else "cpu",
                "k_neighbors": (
                    obj.get("k_neighbors") if obj.get("k_neighbors") is not None else 10
                ),
                "calculate_metrics": (
                    obj.get("calculate_metrics")
                    if obj.get("calculate_metrics") is not None
                    else False
                ),
            }
        )
        return _obj
