# coding: utf-8

"""
    BLAST Query

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from blast_query_microservice.models.blast_type import BlastType
from typing import Optional, Set
from typing_extensions import Self

class SequenceQuery(BaseModel):
    """
    A query for a BLAST search.  - sequence: could be nucleotide sequence for blastn, tblastx, or tblastn, or amino acid sequence for blastp or blastx.
    """ # noqa: E501
    sequence: StrictStr
    type: BlastType
    descriptions: Optional[StrictInt] = None
    alignments: Optional[StrictInt] = None
    hitlist_size: Optional[StrictInt] = None
    expect: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["sequence", "type", "descriptions", "alignments", "hitlist_size", "expect"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SequenceQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if descriptions (nullable) is None
        # and model_fields_set contains the field
        if self.descriptions is None and "descriptions" in self.model_fields_set:
            _dict['descriptions'] = None

        # set to None if alignments (nullable) is None
        # and model_fields_set contains the field
        if self.alignments is None and "alignments" in self.model_fields_set:
            _dict['alignments'] = None

        # set to None if hitlist_size (nullable) is None
        # and model_fields_set contains the field
        if self.hitlist_size is None and "hitlist_size" in self.model_fields_set:
            _dict['hitlist_size'] = None

        # set to None if expect (nullable) is None
        # and model_fields_set contains the field
        if self.expect is None and "expect" in self.model_fields_set:
            _dict['expect'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SequenceQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sequence": obj.get("sequence"),
            "type": obj.get("type"),
            "descriptions": obj.get("descriptions"),
            "alignments": obj.get("alignments"),
            "hitlist_size": obj.get("hitlist_size"),
            "expect": obj.get("expect")
        })
        return _obj


