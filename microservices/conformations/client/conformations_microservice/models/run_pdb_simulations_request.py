# coding: utf-8

"""
    Conformations api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from conformations_microservice.models.integrators import Integrators
from conformations_microservice.models.water_force_fields import WaterForceFields
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RunPdbSimulationsRequest(BaseModel):
    """
    RunPdbSimulationsRequest(*args: Any, temperatureK: float = 273.15, frictionCoeff: float = 1.0, stepSize: float = 0.002, integrator: conformations.api_models.Integrators = <Integrators.langevin: 'LangevinIntegator'>, takeFrameEvery: int = 1000, totalFrames: int = 10000, pdbContent: str, forceField: str, waterForceField: conformations.api_models.WaterForceFields)
    """ # noqa: E501
    temperature_k: Optional[Union[StrictFloat, StrictInt]] = Field(default=273.15, alias="temperatureK")
    friction_coeff: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, alias="frictionCoeff")
    step_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.002, alias="stepSize")
    integrator: Optional[Integrators] = None
    take_frame_every: Optional[StrictInt] = Field(default=1000, alias="takeFrameEvery")
    total_frames: Optional[StrictInt] = Field(default=10000, alias="totalFrames")
    pdb_content: StrictStr = Field(alias="pdbContent")
    force_field: StrictStr = Field(alias="forceField")
    water_force_field: WaterForceFields = Field(alias="waterForceField")
    __properties: ClassVar[List[str]] = ["temperatureK", "frictionCoeff", "stepSize", "integrator", "takeFrameEvery", "totalFrames", "pdbContent", "forceField", "waterForceField"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RunPdbSimulationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RunPdbSimulationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "temperatureK": obj.get("temperatureK") if obj.get("temperatureK") is not None else 273.15,
            "frictionCoeff": obj.get("frictionCoeff") if obj.get("frictionCoeff") is not None else 1.0,
            "stepSize": obj.get("stepSize") if obj.get("stepSize") is not None else 0.002,
            "integrator": obj.get("integrator"),
            "takeFrameEvery": obj.get("takeFrameEvery") if obj.get("takeFrameEvery") is not None else 1000,
            "totalFrames": obj.get("totalFrames") if obj.get("totalFrames") is not None else 10000,
            "pdbContent": obj.get("pdbContent"),
            "forceField": obj.get("forceField"),
            "waterForceField": obj.get("waterForceField")
        })
        return _obj


