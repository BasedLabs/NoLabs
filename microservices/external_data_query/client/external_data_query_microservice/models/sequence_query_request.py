# coding: utf-8

"""
    External Databases Query API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from external_data_query_microservice.models.evalue_cutoff import EvalueCutoff
from external_data_query_microservice.models.identity_cutoff import IdentityCutoff
from external_data_query_microservice.models.job_id import JobId
from pydantic import BaseModel, StrictStr
from typing_extensions import Self


class SequenceQueryRequest(BaseModel):
    """
    SequenceQueryRequest
    """  # noqa: E501

    sequence: StrictStr
    sequence_type: StrictStr
    identity_cutoff: Optional[IdentityCutoff] = None
    evalue_cutoff: Optional[EvalueCutoff] = None
    job_id: Optional[JobId] = None
    __properties: ClassVar[List[str]] = [
        "sequence",
        "sequence_type",
        "identity_cutoff",
        "evalue_cutoff",
        "job_id",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SequenceQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity_cutoff
        if self.identity_cutoff:
            _dict["identity_cutoff"] = self.identity_cutoff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evalue_cutoff
        if self.evalue_cutoff:
            _dict["evalue_cutoff"] = self.evalue_cutoff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict["job_id"] = self.job_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SequenceQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "sequence": obj.get("sequence"),
                "sequence_type": obj.get("sequence_type"),
                "identity_cutoff": (
                    IdentityCutoff.from_dict(obj["identity_cutoff"])
                    if obj.get("identity_cutoff") is not None
                    else None
                ),
                "evalue_cutoff": (
                    EvalueCutoff.from_dict(obj["evalue_cutoff"])
                    if obj.get("evalue_cutoff") is not None
                    else None
                ),
                "job_id": (
                    JobId.from_dict(obj["job_id"])
                    if obj.get("job_id") is not None
                    else None
                ),
            }
        )
        return _obj
