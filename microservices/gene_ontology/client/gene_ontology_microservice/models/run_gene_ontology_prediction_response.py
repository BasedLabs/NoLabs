# coding: utf-8

"""
    Gene ontology api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List

from gene_ontology_microservice.models.go_confidence_response import \
    GoConfidenceResponse
from pydantic import BaseModel, StrictStr

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class RunGeneOntologyPredictionResponse(BaseModel):
    """
    RunGeneOntologyPredictionResponse
    """  # noqa: E501

    go_confidence: List[GoConfidenceResponse]
    errors: List[StrictStr]
    __properties: ClassVar[List[str]] = ["go_confidence", "errors"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RunGeneOntologyPredictionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in go_confidence (list)
        _items = []
        if self.go_confidence:
            for _item in self.go_confidence:
                if _item:
                    _items.append(_item.to_dict())
            _dict["go_confidence"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RunGeneOntologyPredictionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "go_confidence": (
                    [
                        GoConfidenceResponse.from_dict(_item)
                        for _item in obj.get("go_confidence")
                    ]
                    if obj.get("go_confidence") is not None
                    else None
                ),
                "errors": obj.get("errors"),
            }
        )
        return _obj
