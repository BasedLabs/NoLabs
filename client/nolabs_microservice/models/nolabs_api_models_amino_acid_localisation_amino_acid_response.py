# coding: utf-8

"""
    NoLabs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NolabsApiModelsAminoAcidLocalisationAminoAcidResponse(BaseModel):
    """
    NolabsApiModelsAminoAcidLocalisationAminoAcidResponse
    """ # noqa: E501
    sequence: Optional[Any]
    name: Optional[Any]
    cytosolic_proteins: Optional[Any]
    mitochondrial_proteins: Optional[Any]
    nuclear_proteins: Optional[Any]
    other_proteins: Optional[Any]
    extracellular_secreted_proteins: Optional[Any]
    __properties: ClassVar[List[str]] = ["sequence", "name", "cytosolic_proteins", "mitochondrial_proteins", "nuclear_proteins", "other_proteins", "extracellular_secreted_proteins"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NolabsApiModelsAminoAcidLocalisationAminoAcidResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['sequence'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if cytosolic_proteins (nullable) is None
        # and model_fields_set contains the field
        if self.cytosolic_proteins is None and "cytosolic_proteins" in self.model_fields_set:
            _dict['cytosolic_proteins'] = None

        # set to None if mitochondrial_proteins (nullable) is None
        # and model_fields_set contains the field
        if self.mitochondrial_proteins is None and "mitochondrial_proteins" in self.model_fields_set:
            _dict['mitochondrial_proteins'] = None

        # set to None if nuclear_proteins (nullable) is None
        # and model_fields_set contains the field
        if self.nuclear_proteins is None and "nuclear_proteins" in self.model_fields_set:
            _dict['nuclear_proteins'] = None

        # set to None if other_proteins (nullable) is None
        # and model_fields_set contains the field
        if self.other_proteins is None and "other_proteins" in self.model_fields_set:
            _dict['other_proteins'] = None

        # set to None if extracellular_secreted_proteins (nullable) is None
        # and model_fields_set contains the field
        if self.extracellular_secreted_proteins is None and "extracellular_secreted_proteins" in self.model_fields_set:
            _dict['extracellular_secreted_proteins'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NolabsApiModelsAminoAcidLocalisationAminoAcidResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sequence": obj.get("sequence"),
            "name": obj.get("name"),
            "cytosolic_proteins": obj.get("cytosolic_proteins"),
            "mitochondrial_proteins": obj.get("mitochondrial_proteins"),
            "nuclear_proteins": obj.get("nuclear_proteins"),
            "other_proteins": obj.get("other_proteins"),
            "extracellular_secreted_proteins": obj.get("extracellular_secreted_proteins")
        })
        return _obj


