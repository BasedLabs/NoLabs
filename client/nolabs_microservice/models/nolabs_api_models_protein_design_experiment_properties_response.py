# coding: utf-8

"""
    NoLabs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from nolabs_microservice.models.hotspots import Hotspots
from nolabs_microservice.models.timesteps import Timesteps
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NolabsApiModelsProteinDesignExperimentPropertiesResponse(BaseModel):
    """
    NolabsApiModelsProteinDesignExperimentPropertiesResponse
    """ # noqa: E501
    pdb_file: Optional[Any]
    pdb_file_name: Optional[Any]
    contig: Optional[Any]
    number_of_designs: Optional[Any]
    hotspots: Optional[Hotspots] = None
    timesteps: Optional[Timesteps] = None
    __properties: ClassVar[List[str]] = ["pdb_file", "pdb_file_name", "contig", "number_of_designs", "hotspots", "timesteps"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NolabsApiModelsProteinDesignExperimentPropertiesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hotspots
        if self.hotspots:
            _dict['hotspots'] = self.hotspots.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timesteps
        if self.timesteps:
            _dict['timesteps'] = self.timesteps.to_dict()
        # set to None if pdb_file (nullable) is None
        # and model_fields_set contains the field
        if self.pdb_file is None and "pdb_file" in self.model_fields_set:
            _dict['pdb_file'] = None

        # set to None if pdb_file_name (nullable) is None
        # and model_fields_set contains the field
        if self.pdb_file_name is None and "pdb_file_name" in self.model_fields_set:
            _dict['pdb_file_name'] = None

        # set to None if contig (nullable) is None
        # and model_fields_set contains the field
        if self.contig is None and "contig" in self.model_fields_set:
            _dict['contig'] = None

        # set to None if number_of_designs (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_designs is None and "number_of_designs" in self.model_fields_set:
            _dict['number_of_designs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NolabsApiModelsProteinDesignExperimentPropertiesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pdb_file": obj.get("pdb_file"),
            "pdb_file_name": obj.get("pdb_file_name"),
            "contig": obj.get("contig"),
            "number_of_designs": obj.get("number_of_designs"),
            "hotspots": Hotspots.from_dict(obj.get("hotspots")) if obj.get("hotspots") is not None else None,
            "timesteps": Timesteps.from_dict(obj.get("timesteps")) if obj.get("timesteps") is not None else None
        })
        return _obj


